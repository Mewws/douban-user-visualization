#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan  9 16:28:30 2019

@author: meldur
"""
import requests
import re
import crawler_http
from bs4 import BeautifulSoup
import time
import crawler_log
import json
import redis_pool as rp
import random
import redis_client

redisClient = redis_client.ConnectToRedis()
# 爬取用户基本数据


def getUserBasicInfo(user_id, count):

    user_url = "https://www.douban.com/people/" + user_id + "/"
    start_time = time.time()
    crawler_log.logTime()
    print('---- 开始爬取第{}个用户'.format(count))
    print('crawler: ' + user_url)
    headers = crawler_http.get_headers()
    # 使用requests发送请求
    user = requests.get(user_url, headers=headers)
    user.encoding = 'utf-8'
    soup = BeautifulSoup(user.text, 'lxml')

    # 判断用户是否有效
    infobox = soup.select("#db-usr-profile")
    mn = soup.select("div.mn")
    if not infobox:
        print('crawler: ⚠️ 无法正常获取用户数据')
        return False
    if mn:
        print('crawler: ⚠️ 该用户账号已被停用')
        return False
    # 获取用户基本信息
    all_info = []
    # id
    userid = re.split(r'/', user_url)[-2]
    # 用户名
    img = soup.find('div', class_='pic').find('img')
    if img:
        username = img.get('alt')
    else:
        username = soup.find('div', class_='pic').find('a').get('title')
    # 头像
    userimg = soup.find('div', class_='basic-info').find('img').get('src')

    # 加入时间
    userinfo = soup.find(
        'div', class_='user-info').find('div', class_='pl').get_text()
    create_date = re.search(r'(\d{4}-\d{2}-\d{2})', userinfo).group()
    # 常居地
    residence1 = soup.find('div', class_='user-info').find('a')
    residence = residence1.get_text() if residence1 else ''
    # 是否是豆瓣官方运营帐号
    is_reason = soup.find('span', class_='reason')
    official_account = 1 if is_reason else 0
    # 书的数量
    book_do_num = 0
    book_wish_num = 0
    book_collect_num = 0
    book = soup.find('div', id='book').find('span', class_='pl')
    if book:
        books = book.find_all('a')
        for i in range(len(books)):
            has_do = re.search('/do', books[i].get('href'))
            if has_do:
                book_do_num = int(
                    re.match(r'\d+', books[i].get_text()).group())
                continue
            has_wish = re.search('/wish', books[i].get('href'))
            if has_wish:
                book_wish_num = int(
                    re.match(r'\d+', books[i].get_text()).group())
                continue
            has_collect = re.search('/collect', books[i].get('href'))
            if has_collect:
                book_collect_num = int(
                    re.match(r'\d+', books[i].get_text()).group())
                continue
    # 电影数量
    movie_do_num = 0
    movie_wish_num = 0
    movie_collect_num = 0
    movie = soup.find('div', id='movie').find('span', class_='pl')
    if movie:
        movies = movie.find_all('a')
        for i in range(len(movies)):
            has_do = re.search('/do', movies[i].get('href'))
            if has_do:
                movie_do_num = int(
                    re.match(r'\d+', movies[i].get_text()).group())
                continue
            has_wish = re.search('/wish', movies[i].get('href'))
            if has_wish:
                movie_wish_num = int(
                    re.match(r'\d+', movies[i].get_text()).group())
                continue
            has_collect = re.search('/collect', movies[i].get('href'))
            if has_collect:
                movie_collect_num = int(
                    re.match(r'\d+', movies[i].get_text()).group())
                continue
    # 评论数量
    review = soup.find('div', id='review').find('a')
    review_num = re.search(r'\d+', review.get_text()).group() if review else 0
    # 常去小组数量
    group = soup.find('div', id='group').find('h2')
    group_num = re.findall('\((\d+)\)', group.get_text())[0] if group else 0

    # 关注人数
    contact = soup.find('div', id='friend').find('a')
    contact_num = 0
    if contact:
        contact = contact.get_text()
        contact_num = int(re.findall(r'成员(\d+)', contact)[0])  # 关注人数

    # 被关注人数
    rev_contact = soup.find('p', class_='rev-link').find('a').get_text()
    rev_contact_num = int(re.findall(r'被(\d+)', rev_contact)[0])  # 被关注人数

    all_info.extend([userid, username, userimg, create_date, residence, contact_num, rev_contact_num, book_do_num, book_wish_num,
                     book_collect_num, movie_do_num, movie_wish_num, movie_collect_num, review_num, group_num, official_account])

    crawler_log.logTime()
    print("---- ✅ 用户爬取结束，用时{}s".format(time.time() - start_time))
    return all_info


# 2.爬取用户电影数据
def getUserMovieInfo(user_id,count):
    print("正在爬取第{}个用户正在看电影列表...".format(count))
    user_data=redisClient.get("douban_user_info:"+user_id)
    do_movie_num=eval(user_data)[10]
    if do_movie_num == 0:
        print("该用户没有正在看的电影")
        return -1
    else:
        user_url='https://movie.douban.com/people/'+user_id+'/'
        start_time = time.time()
        #crawler_log.logTime()
        #所有电影[id,addDate]列表
        all_movies_info=[]
        #页数
        n=do_movie_num//30
        print("共有{}页".format(n))
        for i in range(n+1):
            headers = crawler_http.get_headers()
            print("正在爬取第{}页...".format(i))
            movie_url=user_url+'do?sort=time&amp;start='+str((i)*30)+'&amp;filter=all&amp;mode=list&amp;tags_sort=count'
            #print(movie_url)
            movie=requests.get(movie_url,headers=headers)
            movie.encoding='utf-8'
            soup=BeautifulSoup(movie.text,'lxml')
            all_movies=soup.find_all('li',class_='item')
            #每页获取30个
            for m in all_movies:
                t=m.find('div',class_='title')
                movie_url=t.find('a').get('href')
                movie_id=re.split(r'/',movie_url)[-2]
                d=m.find('div',class_='date').get_text()
                movie_date=re.search(r'(\d{4}-\d{2}-\d{2})',d).group()
                #print(movie_id_date)
                all_movies_info.append([movie_id,movie_date])
            time.sleep(random.randint(1,5))
        #print(len(all_movies_info))
        #print(all_movies_info)
    crawler_log.logTime()
    print("---- 第{}用户正在看电影爬取结束，用时{}s".format(count,time.time() - start_time))
    return all_movies_info


# 3.爬取用户id数据
# 获取“正在发生”用户id
def getHappeningUserId(url):
    headers = crawler_http.get_headers()
    user = requests.get(url, headers=headers)
    user.encoding = 'utf-8'
    user = json.loads(user.text)
    soup = BeautifulSoup(user["html"], 'lxml')
    result = soup.select("li.clearfix div.action_meta a")
    userIds = []
    for i in result:
        userIds.append(i.get('href').split("/")[-2])
    return userIds
# 获取“电影评论”用户id
def getCommentsUserId(url):
    headers = crawler_http.get_headers()
    user = requests.get(url, headers=headers)
    user.encoding = 'utf-8'
    user = json.loads(user.text)
    #print(headers)
    soup = BeautifulSoup(user["html"], 'lxml')
    result = soup.select("div.avatar a")
    userIds = []
    for i in result:
        userIds.append(i.get('href').split("/")[-2])
    #print(userIds)
    return userIds
def get_movieId(count):
    movies_id='30167489-26411217-26366496-26374197-23774869-27163287-7059671-4135710-26916229-20438964-26147417-26366492-4864908-27622447-27605698-26752088-26815162-24773958-26640371-4920389-20435622-2240990-26861685-26972275-26611804-26649604-26393561-26779885-25761178-26800978-26661191-26764928-22265634-27031389-1294693-5350027-26425068-26830647-27099227-26897019-26936441-26100432-26803711-25808075-22266126-27024903-10512661-26378579-26681664-26798481-26607693-25980443-26718828-26761416-26340419-26392856-27139560-20495023-26657126-2158490-26357945-24753477-27038183-26679188-26580232-26677495-11502973-1482080-27091593-26235354-26270502-26831711-6880497-26844922-6985803-26839466-25864124-26387939-25884841-25937854-25818101-26895171-26354572-5262339-25765735-26766869-25884125-25934014-6048838-21324900-26924729-10484117-26586806-24860318-25894431-11584019-11502153-20453087-5912992-26694988-26416603-2338055-25726614-25983044-10774104-26433966-25731059-25815034-26354336-26340522-25986180-25889476-26469862-26356789-1305074-26709728-26838164-26387813-25745577-26266072-26527993-25838906-5045678-26635329-24324730-26602304-4202982-2160565-2357317-3804891-6307447-7564989-6424814-4753630-3819877-10533913-6558801-26585014-25820460-26387804-25777636-3725320-1309071-26337362-25859495-25662329-26356538-26282448-11589036-25819229-4086853-25823132-20326665-1866473-25920885-24751756-1296987-2003256-1456879-1498629-25864085-2353023-5154799-1293182-24875534-26425522-25798448-1306785-10463953-20471761-10484041-10727641-3281175-24713882-2303845-26595432-4913185-6985810-24397586-6425116-10590706-6558062-23232876-3016187-25923092-24697595-1296520-26277313-11637978-24879839-6803494-23011215-25786077-5379824-5977984-3592854-24381349-5317248-24879820-1440164-25802407-1291840-3040418-2997063-1300960-24522875-25769362-10741643-1469111-1295348-5996800-4066190-3419246-25788954-1294927-1305466-4843637-1308288-1482101-1309043-1293555-1298128-1295684-1301106-2225321-1309199-24845115-1300361-2132930-24845116-3114109-1304608-1307319-1300399-1422917-1303139-1299247-1297970-5502697-1299059-1303773-1440855-6886518-1305333-4286017-1293167-1418192-1294323-1301578-1857099-26356495-24750126-1523682-1304141-10485647-3066739-3610047-1794171-4746257-1293838-1866479-6390823-1297151-3642843-1293013-1296528-2046839-1291839-1309078-1301445-1300656-1295384-1401524-1440283-6874456-6082518-1299054-3071441-25779043-24815950-1306029-25846032-2043546-3011235-1291832-1369747-1291565-1298653-1292055-1302467-1308767-1302476-1292218-1292062-1291992-1291557-1294240-21937445-1291578-1291843-1292402-1292434-1298070-1291999-1300267-1291828-1296736-1291548-1299131-1291571-1291572-1291858-1291552-1291841-1291560-1294639-2044089-6952149-6757776-10741834-4927382-4256328-24869399-1441794-23055586-1292349-1949321-2028027-2373195-1293394-10563780-1294584-1905462-25726259-23761370-3412830-2156528-1432146-2222996-21318488-24405378-25773932-11026735-3070765-2998373-26148846-2973079-6126442-7065161-4707902-1295647-1889243-25884869-24404677-6887029-7065154-7051357-25762566-10545939-24695611-3268489-25884416-3285050-25798222-6755346-24879858-24743711-6080755-10598440-4206357-1781126-1292067-3993553-3148748-3986493-3546019-3287562-4023638-1300613-6126439-5028366-10549253-3754368-1302061-1304898-1291860-1945780-1871906-1305487-1294829-2393064-1851906-2268359-3040438-2129039-2998270-1947270-3389558-3006772-4850563-6024544-3168089-3742993-3217894-6786002-6097775-20470074-1444534-3274505-7046723-11594992-24745500-25704588-25816252-3103678-1418529-3237723-2152997-2017954-4051761-10606004-6037429-10756211-2133323-5323957-11525673-6722879-3023164-24522834-10437779-10777687-10864706-21360417-3793783-3025447-2132932-2300586-24876527-3001399-1800597-10748074-10864754-1456579-4849922-10434591-1479817-1946776-1309047-1316581-3231740-6869395-2028666-6057942-3176525-1898121-6517421-6142597-3231742-4319218-5153551-6537500-5323968-10746175-10733376-1907966-10573695-1499803-10574468-4821046-5308265-6860160-10617158-3530403-6729121-4904662-3754382-2363876-3821067-3808604-4812830-4202204-1929463-5380919-5964718-6890730-6534248-3552028-6110546-19977817-6395245-3771562-4718369-5373274-4226460-2129132-3395373-6041191-4728518-4190211-4109909-3006783-3893805-4914468-1306512-1306439-3036473-4050029-3011093-4739952-4942776-3642835-6788265-6872244-1302133-1306130-5129161-5450891-4136036-4824515-5361544-2030853-5977835-4206436-1485260-1297671-3775167-3837519-3094580-5385604-3532614-3068206-6886533-1917074-4051753-3681613-4913200-4920528-1461283-3649049-4896304-1305539-3736637-4873490-3824500-1293150-4304402-6019180-1978369-1972729-2028661-2028669-3131599-4876722-3007819-1755972-4942778-1293204-1477206-3075287-3041269-3443389-5422105-1297544-4073898-1972701-4724558-1302522-1401118-4896295-1467748-1878605-1297509-3788587-1578507-2976123-1921583-6309400-3227410-3233635-1299565-1305441-1484091-4822848-4097023-3711760-1297447-4724739-1300551-3236478-1304102-2567628-3230462-3205624-1417847-4059245-3793023-3055452-2340927-4896263-4004731-4022138-3718447-2122766-4290614-3158990-2301772-4861410-1293626-3742360-1302089-1875488-4812761-1308974-1438652-2080578-3105588-4189670-1308799-3578981-5313367-4251801-5183696-3606975-1388216-1308779-1296569-1305279-1291847-1298525-3212106-2988294-1945336-1300752-1291818-1297192-3073124-3014183-3541415-5256160-2129100-3105224-1308762-1309046-3402101-1464338-3737279-1297503-1296132-2215609-2156754-1431617-1304332-1308848-3792799-1306915-2230757-3777800-1309118-3173635-1394163-2011795-1306471-3077791-1292449-3324507-1300064-1295452-3815920-3230460-1304961-3240208-1483577-3737117-1291823-1305197-1482075-1301213-1292278-2297877-2154868-1315574-2213597-1292276-1292532-2996640-1483646-1298817-1294371-1293908-1306885-2036564-3137670-1652587-1448700-1293861-3626416-3227266-1419969-3005875-1294621-3011102-2338068-3920977-1299621-1305480-1299481-3734112-3543690-1292528-1308620-3007773-1296508-1294103-2262170-1472575-3001172-1301705-2995839-1298737-3660786-1298898-2274465-1292765-3008263-3412882-5414534-2376728-2301387-1297375-3073079-1292064-1292557-1293172-1300069-1292553-1292484-1401533-3539855-1303815-1301823-1296196-1296909-1305158-1296242-1297271-1863102-1292577-2003389-1303368-1292659-1293531-1293399-2301383-1309136-1465792-1763896-1466085-2149802-1460919-1294408-1301509-1293088-1295242-1291575-1291574-1294766-1294833-1309201-1291577-1291561-1301167-2028647-1294963-1316513-2148619-1305034-1306505-1294007-1305182-1300108-1308747-1304022-1303173-1307014-1296253-1307690-1304560-1307698-2132220-3033864-1461964-1464540-1461985-1434172-1483218-1483955-1424630-1482709-1308306-2274433-1291853-1300945-1303021-1307766-1310185-1307043-1393479-1308811-1439890-1307849-1304536-1441602-1306160-1859036-1291550-1306249-1293351-1329936-1297518-1297223-1306951-1297863-1302090-1298644-1300566-1296201-1302678-1299680-1300498-1305355-1293607-1304677-1302977-1306057-1307747-1292365-1291875-1301168-1292287-1294417-1297304-1298443-1293475-1292704-1297763-1294561-1296837-1947089-1907464-1308587-1307323-1292275-1299603-1301171-1329950-1306612-1308570-1418189-1418191-3335371-1428577-1431699-1431713-1300505-1441863-2000689-2157295-1431951-1883692-1498593-1498597-1498594-2085721-2148394-2148391-2990287-2138382-1309060-1291583-1291585-1297359-1308807-1307811-1293318-1292286-1299981-1308207-1301861-1428054-2353665-1329562-1291543-1297747-1307739-1299398-1292213-1302425-2279772-1927686-1940867-1394968-1997681-1296436-1828115-1499008-1308482-1298252-1473074-1305067-1294114-1305183-1297909-1296693-1292867-1300303-2988163-1308722-1302705-1401205-1297866-1294488-1297924-1316510-1862151-1418190-1307775-1293544-1304447-1767042-1308831-1296078-1297018-1829654-1308987-1309120-1308751-1301198-1299362-1464563-1305566-1300916-3236361-1304826-1292215-1292052-1291546-1307914-1295124-1292722-1972698-1442614-1820156-1947091-1307740-1428378-1945800-3018123-2133413-2354729-1422911-1295250-1305724-2065186-1792928-2212866-1292492-1292931-1436891-1309183-3901388-1297481-3063002-1950821-1476023-1304585-3077668-1299776-1293961-1419934-2032143-1950148-1792936-1304582-3681358-1422946-1298759-2969582-3047617-2149806-2297265-1474985-1300352-1474984-1308617-2037012-3314870-1295939-1292531-1306939-1301886-1293225-1766496-1474185-1295644-1305666-2143661-2028819-2147854-1291833-1307542-1297689-1292720-1303246-2042230-3041806-1308843-1295318-1419936-1292274-1291865-1292223-1309020-1292780-1482853-3250377-1292001-2054933-1293767-1293708-1851857-1299837-1296294-2381810-1981242-3141950-3291930-3144963-2129042-1900841-2118235-2027899-1293377-1947144-1308750-1293460-1293596-1292401-1421823-1434323-1291573-2224980-1294588-1891179-1301726-1294000-1300992-3149087-1293537-1777612-2973449-1439551-1293317-1301498-2135981-3230459-1858876-2050557-3096779-1316626-2131459-1293847-1303067-3093006-1449381-1808041-1309065-1292348-3055180-2299278-2080749-1929441-1298397-1293976-1303418-1950525-1298624-2146991-1870116-2363866-1353745-1607471-1929449-1849031-2042178-1301717-1296390-1949312-1465829-3427209-1292225-2244529-1824412-1292217-1783457-2979687-3003137-1585236-1295280-1886749-1431712-1815485-1883725-1305529-1293899-1431956-1916088-1295872-2063530-1759371-1302100-1302605-1291863-1292699-1307687-1302205-1295873-1998799-2032212-1845639-1860528-1845625-1782004-1439831-1860582-1883755-1781636-1860377-1453575-1794793-1456202-1779379-1481825-1808049-1845597-1440937-1872374-1484187-1845562-1845560-1498604-1807959-1428578-1431947-1431946-1431949-1431945-1431960-1431716-1431685-1307315-1431718-1428576-1939414-1422913-1300266-1291558-1949328-1293697-1300056-3026402-1309054-1293234-1295399-2268805-2123052-1306860-1293310-1294827-1292515-1293107-1293176-1303110-1300208-1418019-1308424-1961963-1296424-1308600-1945549-1303036-1441053-1304485-1460932-1305294-1783772-1423026-1298038-1937401-1296874-1305015-1419953-1296339-2054505-1899193-1864990-1291990-1296091-1765609-1433990-1422927-1308820-1768071-1468154-1419943-1292267-1300220-1307052-1300292-1301641-1296572-1925384-1419297-1298854-1291584-1291851-1292224-1453238-1291835-1293350-1393859'
    movie_id=movies_id.split('-')[count]
    return movie_id,count+1
#电影热门评论用户写入redis用户池
def addCommentsUserId(count):
    movie_id,count=get_movieId(count)
    print(movie_id,count)
    result=[]
    for sort in ['new_score','time']:
        for start in [0,20,40,60,80]:
            url='https://movie.douban.com/subject/'+movie_id+'/comments?start='+str(start)+'&limit=20&sort='+sort+'&status=P&comments_only=1'
            print(url)
            result1=getCommentsUserId(url)
            result.extend(result1)
            time.sleep(random.randint(1,10))
            #print(result)
    return result
            
            
if __name__ == "__main__":
    # print(getUserBasicInfo('r...7', 1))
    
    #话题广场-正在发生用户
    url = 'https://www.douban.com/j/gallery/new_posts?start=2000&count=200'
    result = getHappeningUserId(url)
    for uid in result:
        rp.addUser(uid)
    #电影影评用户
    #for i in range(167,1000):
    #    result=addCommentsUserId(i)
    #    for uid in result:
    #        rp.addUser(uid)
    #    time.sleep(10)

    #print(result)
    
    
